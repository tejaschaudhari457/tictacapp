a simple algorithm for a Tic Tac Toe game in JavaScript:

// Initialize the game board
let gameBoard = ['', '', '', '', '', '', '', '', ''];
let currentPlayer = 'X';

// Function to handle a player's move
function handleMove(index) {
    if (gameBoard[index] === '' && !isGameOver()) {
        gameBoard[index] = currentPlayer;
        switchPlayer();
        displayBoard();
        checkResult();
    }
}

// Function to switch to the next player
function switchPlayer() {
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
}

// Function to check if the game is over
function isGameOver() {
    return gameBoard.every(cell => cell !== ''); // Game is over if all cells are filled
}

// Function to check the result of the game
function checkResult() {
    if (isWinner('X')) {
        console.log('Player X wins!');
        resetGame();
    } else if (isWinner('O')) {
        console.log('Player O wins!');
        resetGame();
    } else if (isGameOver()) {
        console.log('It\'s a draw!');
        resetGame();
    }
}

// Function to check if a player has won
function isWinner(player) {
    const winPatterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
        [0, 4, 8], [2, 4, 6]              // Diagonals
    ];

    return winPatterns.some(pattern =>
        pattern.every(index => gameBoard[index] === player)
    );
}

// Function to reset the game
function resetGame() {
    gameBoard = ['', '', '', '', '', '', '', '', ''];
    currentPlayer = 'X';
    console.log('Game reset!');
    displayBoard();
}

// Function to display the current state of the board
function displayBoard() {
    console.log(`
        ${gameBoard[0]} | ${gameBoard[1]} | ${gameBoard[2]}
        ---------
        ${gameBoard[3]} | ${gameBoard[4]} | ${gameBoard[5]}
        ---------
        ${gameBoard[6]} | ${gameBoard[7]} | ${gameBoard[8]}
    `);
}

// Example: Make moves to test the game
handleMove(0);
handleMove(4);
handleMove(1);
handleMove(3);
handleMove(2);
